Bluetooth Mesh: (Device) Settings Server
############################


The Bluetooth Mesh Settings sample gives an example on how to change device settings (in this case TX power) with Bluetooth Mesh.
The Settings Client is able to decrease or increase the TXP value on the Settings Server, and fetching its status, by using the client-side buttons. 

Overview
********

This sample is split into three source files:

* A :file:`main.c` file to handle initialization.
* One file for handling Mesh models, :file:`model_handler.c`.

Provisioning
============

Use the nRF Mesh App for Provisioning. 

Models
======

The following table shows the Settings composition data for this sample:

.. table::
   :align: center

   =====================
   Element 1                 
   =====================
   Config Server      
   Health Server
   Mesh Settings Server
   =====================

The models are used for the following purposes:

* Mesh Settings Server controls the TX power value on the development kit.
* Config Server allows configurator devices to configure the node remotely.
* Health Server provides ``attention`` callbacks that are used during provisioning to call your attention to the device.
  These callbacks trigger blinking of the LEDs.

The model handling is implemented in :file:`src/model_handler.c`, which uses the :ref:`hci_pwr_ctrl` library,
to control the TX power for the board according to the received messages of Settings Server.

Requirements
************

The sample supports the following development kits:

.. table-from-rows:: /includes/sample_board_rows.txt
   :header: heading
   :rows: nrf52840dk_nrf52840, nrf52dk_nrf52832

The sample also requires a smartphone with Nordic Semiconductor's nRF Mesh mobile app installed in one of the following versions:

  * `nRF Mesh mobile app for Android`_
  * `nRF Mesh mobile app for iOS`_

User interface
**************

Buttons:
   Can be used to input the OOB authentication value during provisioning.
   All buttons have the same functionality during this procedure.

LEDs:
   Show the OOB authentication value during provisioning if the "Push button" OOB method is used.


Building and running
********************

.. |sample path| replace:: :file:`samples/bluetooth/mesh/settings_server`

Testing
=======

After programming the sample to your board, you can test it by using a smartphone with Nordic Semiconductor's nRF Mesh app installed.
Testing consists of provisioning the device and configuring it for communication with the mesh models.

Provisioning the device
-----------------------

The provisioning assigns an address range to the device, and adds it to the mesh network.
Complete the following steps in the nRF Mesh app:

1. Tap :guilabel:`Add node` to start scanning for unprovisioned mesh devices.
#. Select the :guilabel:`Mesh Settings Server` device to connect to it.
#. Tap :guilabel:`Identify` and then :guilabel:`Provision` to provision the device.
#. When prompted, select the OOB method and follow the instructions in the app.

Once the provisioning is complete, the app returns to the Network screen.

Configuring models
------------------

Complete the following steps in the nRF Mesh app to configure models:

1. On the Network screen, tap the :guilabel:`Mesh Settings Server` node.
   Basic information about the mesh node and its configuration is displayed.
#. In the Mesh node view, expand the first element.
   It contains the list of models in the first element of the node.
#. Tap :guilabel:`Settings Server` to see the model's configuration.
#. Bind the model to application keys to make it open for communication:

   1. Tap :guilabel:`BIND KEY` at the top of the screen.
   #. Select :guilabel:`Application Key 1` from the list.

Dependencies
************

This sample uses the following |NCS| libraries:

* :ref:`dk_buttons_and_leds_readme`

In addition, it uses the following Zephyr libraries:

* ``include/drivers/hwinfo.h``
* :ref:`zephyr:kernel_api`:

  * ``include/kernel.h``

* :ref:`zephyr:bluetooth_api`:

  * ``include/bluetooth/bluetooth.h``

* :ref:`zephyr:bluetooth_mesh`:

  * ``include/bluetooth/mesh.h``

* :ref:`zephyr:bluetooth_hci`:

  * ``include/bluetooth/hci.h``
  * ``include/bluetooth/hci_vs.h``
  * ``include/bluetooth/conn.h``